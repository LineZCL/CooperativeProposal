plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'checkstyle'
	id 'com.github.spotbugs' version '6.0.25'
}

ext {
	set('springCloudVersion', "2025.0.0")
}

group = 'com.miyazaki'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.11")
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	implementation("org.flywaydb:flyway-core")
	implementation("org.flywaydb:flyway-database-postgresql")
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn test 
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/*Application.*',
				'**/*Config.*',
				'**/dto/**',
				'**/entity/**',
				'**/repository/**',
				'**/*Repository.*',
				'**/request/**',
				'**/response/**',
				'**/message/**'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	violationRules {
		rule {
			limit {
				minimum = 0.90 
			}
		}
	}
}

checkstyle {
	toolVersion = '10.12.4'
	configFile = file("config/checkstyle/checkstyle.xml")
	ignoreFailures = true
	maxWarnings = 200
	maxErrors = 50
}

checkstyleMain {
	source ='src/main/java'
	reports {
		xml.required = true
		html.required = true
	}
}

checkstyleTest {
	source ='src/test/java'
	reports {
		xml.required = true
		html.required = true
	}
}

spotbugs {
	toolVersion = '4.8.2'
	ignoreFailures = true
	effort = 'default'
	reportLevel = 'high'
}

spotbugsMain {
	reports {
		xml.required = true
		html.required = true
	}
}

spotbugsTest {
	reports {
		xml.required = true
		html.required = true
	}
}

task lint {
	dependsOn 'checkstyleMain', 'checkstyleTest', 'spotbugsMain', 'spotbugsTest'
	description = 'Run all linting tasks'
	group = 'verification'
}

task lintCheckstyle {
	dependsOn 'checkstyleMain', 'checkstyleTest'
	description = 'Run Checkstyle linting only'
	group = 'verification'
}

task lintSpotbugs {
	dependsOn 'spotbugsMain', 'spotbugsTest'
	description = 'Run SpotBugs linting only'
	group = 'verification'
}

task lintMain {
	dependsOn 'checkstyleMain', 'spotbugsMain'
	description = 'Run linting on main source code only'
	group = 'verification'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
